### 二叉排序树

- 若左子树不为空，则左子树上所有节点的值均小于根节点的值；  
- 若右子树不为空，则右子树上所有节点的值均大于根节点的值；  
- 左右子树也分别为二叉排序树。  

查找、插入、删除操作平均时间复杂度为 O(log n)。当输入数据接近有序时，BST 可能退化成链表，最坏时间复杂度变为 O(n)。

### 平衡二叉树 AVL

为了解决 BST 退化的问题，AVL 树引入了**平衡因子**，即每个节点左子树和右子树的高度差不超过 1。  
当插入或删除导致失衡时，通过**旋转操作**（左旋、右旋、左右旋、右左旋）来恢复平衡。


### 红黑树

红黑树是另一种自平衡的二叉搜索树，相较 AVL 树更加**“懒惰”**，它在维护平衡时对旋转的要求较宽松，因此在频繁插入/删除场景下更高效。

**性质**（红黑性质）：
1. 节点是红色或黑色；
2. 根节点是黑色；
3. 每个叶子节点（NIL）是黑色；
4. 每个红色节点的子节点都是黑色；
5. 任意节点到其所有叶子节点路径上的黑色节点数相同。

**用途**：Linux 内核、C++ STL 的 `map` 和 `set`、Java 的 `TreeMap` 等都使用红黑树。

### B树（Balanced Tree）

**特点**：
- 每个节点可以有多个关键字和多个子树；
- 所有叶子节点在同一层；
- 插入和删除不会频繁地导致节点移动；
- 相较二叉树，**减少了磁盘IO的次数**。

**阶（order）**：B树的阶表示每个节点最多可以有几个子树。例如，m 阶 B 树的每个节点最多有 m 个孩子，最多 m−1 个关键字。
### B+树


**区别于 B 树**：
- 所有的关键字都存在叶子节点中，非叶子节点只存储索引；
- 叶子节点通过指针**顺序链接**，提高区间查询效率；
- 非叶子节点不存实际数据，只用于引导搜索路径。

**应用**：B+树是大多数数据库（如 MySQL 的 InnoDB 引擎）索引结构的首选。
